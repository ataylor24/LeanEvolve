from src.application.generator.llm import ConjectureGPT
from src.application.generator.prompt_maker import PromptMaker
from src.entity.conjecture import Conjecture
from typing import List

class LLMFitnessEvaluator:
    def __init__(self, model_name: str, api_key: str):
        self.model_name = model_name
        self.api_key = api_key
        self.llm = ConjectureGPT(model_name, api_key)
        self.prompt_maker = PromptMaker()

    def generate(self, context: str, parent_code: str = "", conjectures: list[str] = []) -> tuple[List[Conjecture], str]:
        """
        Generate conjectures and evaluate their fitness.
        The conjectures are generated by the ConjectureGenerator class.
        The fitness is evaluated by the LLM.

        Args:
            context_id: The ID of the context.
            context: The context to generate conjectures from.
            conjectures: The conjectures to evaluate.
            parent_code: The parent code to generate conjectures from.
            operator_hint: The operator hint to use for generating conjectures.

        Returns:
            A tuple containing the conjectures and the fitness score.
        """
        prompt = self.prompt_maker.make_fitness_check(context, parent_code, conjectures)
        resp_obj = self.llm.ask_fitness_check(prompt)
        return resp_obj["judged_conjectures"]