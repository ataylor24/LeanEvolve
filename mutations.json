{
    "Mathlib.Algebra.Squarefree.Basic": {
        "radical_squarefree_equiv": "Rewrite Squarefree n as radical n = n (in ℕ; in ℤ use |n|).",
        "polynomial_squarefree_lift": "If n ≠ 0 then Squarefree (C n * X + 1) in ℤ[X].",
        "squarefree_power_divisor_bound": "Squarefree n ⇒ every d ∣ n^k is d = d₀ * m^2 with d₀ ∣ n (k ≥ 1).",
        "unit_associated_normalisation": "Replace association x ~ y by ∃ u : Units, u • x = y to normalise square-free factors.",
        "squarefree_mul_coprime_iff": "Squarefree (m*n) ↔ Squarefree m ∧ Squarefree n ∧ gcd m n = 1 (ℕ/ℤ; UFD version too).",
        "squarefree_divisor_closed": "Squarefree n ∧ d ∣ n ⇒ Squarefree d.",
        "squarefree_no_square_factor": "Squarefree n ∧ d^2 ∣ n ⇒ d = 1 (ℕ) or |d| = 1 (ℤ).",
        "radical_multiplicative_coprime": "gcd m n = 1 ⇒ radical (m*n) = radical m * radical n.",
        "squarefree_power_force_unit": "k ≥ 2 ∧ Squarefree (n^k) ⇒ n = 1 (ℕ) / |n| = 1 (ℤ).",
        "squarefree_divisor_bijection": "If Squarefree n then divisors of n biject with subsets of prime divisors; τ(n) = 2^{ω(n)}."
    },
    "Mathlib.Analysis.Complex.Arg": {
        "arg_additive_on_branch": "On a fixed continuous branch Θ, Θ(zw) = Θ(z) + Θ(w) (mod 2π), literal equality for Θ-valued lift.",
        "arg_inverse_negation": "On a branch Θ, Θ(z⁻¹) = -Θ(z); principal arg gives equality modulo 2π.",
        "arg_right_half_plane_bound": "Re z > 0 ⇒ -π/2 < Arg z < π/2 (principal branch).",
        "arg_triangle_strict": "If z,w,zw avoid the branch cut, |Arg(zw) - Arg z - Arg w| < π.",
        "arg_path_derivative": "For C¹ path γ avoiding 0 and branch Θ along γ, dΘ/dt = Im(γ'(t)/γ(t)).",
        "arg_pos_real_zero": "x ∈ ℝ, x > 0 ⇒ Arg x = 0.",
        "arg_neg_real_pi": "x ∈ ℝ, x < 0 ⇒ Arg x = π (principal range).",
        "arg_conjugate_negation": "Arg (conj z) = - Arg z (principal branch; handle z ≠ 0).",
        "arg_product_by_pos_real": "a > 0 real ⇒ Arg (a*z) = Arg z (principal branch).",
        "arg_quotient_on_branch": "On a branch Θ, Θ(z/w) = Θ(z) - Θ(w) (mod 2π), literal equality for Θ-valued lift."
    },
    "Mathlib.SetTheory.Cardinal.Arithmetic": {
        "cantor_strict_inequality": "For any cardinal κ, κ < 2^κ.",
        "koenig_power_cofinality": "For infinite κ, κ^{cf κ} > κ.",
        "infinite_sum_collapse": "If κ, λ are infinite then κ + λ = max(κ, λ).",
        "infinite_product_collapse": "If 2 ≤ κ ≤ λ with κ, λ infinite then κ · λ = λ.",
        "finite_power_collapse": "If κ is infinite and 1 ≤ n < ω then κ^n = κ.",
        "finite_subsets_cardinality": "If κ is infinite then |{F ⊆ κ : F finite}| = κ.",
        "hartogs_bound": "For any set X, |X| < 𝔥(X) (Hartogs number).",
        "countable_sequences_lower_bound": "If κ is infinite then κ ≤ κ^{ℵ₀}.",
        "cartesian_square_bijection": "If κ is infinite then κ × κ ≃ κ.",
        "finite_sequences_cardinality": "If κ is infinite then κ^{<ω} = ⋃_{n<ω} κ^n has cardinality κ."
    },
    "Mathlib.LinearAlgebra.Matrix.Symmetric": {
        "loewner_order_transitivity": "0 ≼ A ≼ B and 0 ≼ B ≼ C ⇒ 0 ≼ A ≼ C; A ≼ B ↔ xᵀAx ≤ xᵀBx ∀x.",
        "symmetric_congruence_invariance": "B = PᵀAP with P invertible ⇒ inertia and eigenvalue multiplicities preserved (Sylvester).",
        "psd_square_root_existence": "A ≽ 0 ⇒ ∃! B ≽ 0 with B^2 = A; and A ≼ C ⇒ A^{1/2} ≼ C^{1/2}.",
        "courant_fischer_minmax": "λ_k(A) = min_{dim S = n−k+1} max_{x∈S\\{0}} (xᵀAx/‖x‖²) for symmetric A.",
        "eigenvalues_real_for_symmetric": "If A is real symmetric (or Hermitian) then all eigenvalues are real.",
        "orthogonal_diagonalization": "Real symmetric A is orthogonally diagonalizable: ∃ Q orthogonal, D diagonal, A = Qᵀ D Q.",
        "rayleigh_bounds": "For symmetric A, λ_min ≤ xᵀAx/‖x‖² ≤ λ_max for all x ≠ 0.",
        "eigenvalue_monotonicity_psd": "A ≼ B (Loewner) ⇒ λ_k(A) ≤ λ_k(B) for all k (Weyl monotonicity).",
        "spectral_radius_equals_op_norm": "For symmetric A, ρ(A) = ‖A‖₂ = max{|λ_k|}.",
        "trace_monotonicity_psd": "A ≼ B and both symmetric ⇒ tr A ≤ tr B."
    }
}